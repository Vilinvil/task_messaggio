// Code generated by MockGen. DO NOT EDIT.
// Source: internal/message/message/usecases/message_service.go
//
// Generated by this command:
//
//	mockgen --source=internal/message/message/usecases/message_service.go --destination=internal/message/message/mocks/reposirory.go --package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Vilinvil/task_messaggio/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockMessageRepository) AddMessage(ctx context.Context, preMessage *models.MessagePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", ctx, preMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockMessageRepositoryMockRecorder) AddMessage(ctx, preMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockMessageRepository)(nil).AddMessage), ctx, preMessage)
}

// GetMessageStatistic mocks base method.
func (m *MockMessageRepository) GetMessageStatistic(ctx context.Context) (*models.MessageStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageStatistic", ctx)
	ret0, _ := ret[0].(*models.MessageStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageStatistic indicates an expected call of GetMessageStatistic.
func (mr *MockMessageRepositoryMockRecorder) GetMessageStatistic(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageStatistic", reflect.TypeOf((*MockMessageRepository)(nil).GetMessageStatistic), ctx)
}

// MockBrokerMessageRepository is a mock of BrokerMessageRepository interface.
type MockBrokerMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMessageRepositoryMockRecorder
}

// MockBrokerMessageRepositoryMockRecorder is the mock recorder for MockBrokerMessageRepository.
type MockBrokerMessageRepositoryMockRecorder struct {
	mock *MockBrokerMessageRepository
}

// NewMockBrokerMessageRepository creates a new mock instance.
func NewMockBrokerMessageRepository(ctrl *gomock.Controller) *MockBrokerMessageRepository {
	mock := &MockBrokerMessageRepository{ctrl: ctrl}
	mock.recorder = &MockBrokerMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerMessageRepository) EXPECT() *MockBrokerMessageRepositoryMockRecorder {
	return m.recorder
}

// WriteMessage mocks base method.
func (m *MockBrokerMessageRepository) WriteMessage(ctx context.Context, msgPayload *models.MessagePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", ctx, msgPayload)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockBrokerMessageRepositoryMockRecorder) WriteMessage(ctx, msgPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockBrokerMessageRepository)(nil).WriteMessage), ctx, msgPayload)
}
