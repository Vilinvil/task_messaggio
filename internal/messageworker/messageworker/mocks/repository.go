// Code generated by MockGen. DO NOT EDIT.
// Source: internal/messageworker/messageworker/usecases/worker.go
//
// Generated by this command:
//
//	mockgen --source=internal/messageworker/messageworker/usecases/worker.go --destination=internal/messageworker/messageworker/mocks/repository.go --package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/Vilinvil/task_messaggio/internal/messageworker/messageworker/repository"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockBrokerMessage is a mock of BrokerMessage interface.
type MockBrokerMessage struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMessageMockRecorder
}

// MockBrokerMessageMockRecorder is the mock recorder for MockBrokerMessage.
type MockBrokerMessageMockRecorder struct {
	mock *MockBrokerMessage
}

// NewMockBrokerMessage creates a new mock instance.
func NewMockBrokerMessage(ctrl *gomock.Controller) *MockBrokerMessage {
	mock := &MockBrokerMessage{ctrl: ctrl}
	mock.recorder = &MockBrokerMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerMessage) EXPECT() *MockBrokerMessageMockRecorder {
	return m.recorder
}

// StartConsumption mocks base method.
func (m *MockBrokerMessage) StartConsumption(ctx context.Context) (<-chan repository.MessagePayloadWithCommitFunc, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConsumption", ctx)
	ret0, _ := ret[0].(<-chan repository.MessagePayloadWithCommitFunc)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// StartConsumption indicates an expected call of StartConsumption.
func (mr *MockBrokerMessageMockRecorder) StartConsumption(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumption", reflect.TypeOf((*MockBrokerMessage)(nil).StartConsumption), ctx)
}

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// SetStatusMessage mocks base method.
func (m *MockMessageRepository) SetStatusMessage(ctx context.Context, messageID *uuid.UUID, status repository.StatusMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusMessage", ctx, messageID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusMessage indicates an expected call of SetStatusMessage.
func (mr *MockMessageRepositoryMockRecorder) SetStatusMessage(ctx, messageID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusMessage", reflect.TypeOf((*MockMessageRepository)(nil).SetStatusMessage), ctx, messageID, status)
}
