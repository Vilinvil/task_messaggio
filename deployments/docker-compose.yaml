version: "3.8"

services:
  postgres:
    image: postgres:16.0-alpine3.18
    restart: always
    env_file:
      - ../.env/.env.postgres
    healthcheck:
      test: "pg_isready -U $${POSTGRES_USER}"
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - postgres:/var/lib/postgresql/data
  kafka:
    image: apache/kafka:3.7.1
    restart: always
    env_file:
      - ../.env/.env.kafka
    healthcheck:
      test: "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list"
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 10s
  message:
    build:
      context: ../.
      dockerfile: ./build/Dockerfile_message
      args:
        - DOMAIN=${DOMAIN}
    restart: always
    env_file:
      - ../.env/.env.message
    healthcheck:
      test: "nc -z message $${PORT} || exit 1"
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 15s
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - log-message:/var/log/message
  messageworker:
    build:
      context: ../.
      dockerfile: ./build/Dockerfile_messageworker
    restart: always
    env_file:
      - ../.env/.env.messageworker
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - log-messageworker:/var/log/messageworker
  nginx:
    image: nginx:1.27.0
    restart: always
    env_file:
      - ../.env/.env.nginx
    depends_on:
      message:
        condition: service_healthy
      messageworker:
        condition: service_started
    volumes:
      - ../configs/nginx.conf:/etc/nginx/nginx.conf
      - ${SSL_CERTIFICATE}:/etc/nginx/cert.cert
      - ${SSL_CERTIFICATE_KEY}:/etc/nginx/key.key
    ports:
      - "7443:7443"

volumes:
  postgres:
  log-message:
  log-messageworker:
