linters:
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - containedctx
    - contextcheck
    - cyclop
    - decorder
    - depguard
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    - exhaustruct
    - exportloopref
    - forcetypeassert
    - funlen
    - gci
    - ginkgolinter
    - gocheckcompilerdirectives
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godox
    - err113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - mnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - gosmopolitan
    - govet
    - grouper
    - importas
    - ineffassign
    - interfacebloat
    - ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    - mirror
    - misspell
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - reassign
    - revive
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testableexamples
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - varnamelen
    - wastedassign
    - whitespace
    - wsl
    - zerologlint

  disable:
    - forbidigo
    - maligned
    - tagalign
    - godot
    - wrapcheck

  presets:
    - bugs
    - comment
    - complexity
    - error
    - format
    - import
    - metalinter
    - module
    - performance
    - sql
    - style
    - test
    - unused

linters-settings:
  depguard:
    rules:
      main:
        files:
          - $all
        allow:
          - $gostd
          - "github.com/Vilinvil/task_messaggio"
          - "github.com/go-park-mail-ru/2023_2_Rabotyagi"
          - "github.com/google/uuid"
          - "github.com/jackc/pgx/v5"
          - "github.com/jackc/pgx/v5/pgxpool"
          - "github.com/jackc/pgx/v5/pgconn"
          - "github.com/pashagolub/pgxmock/v3"
          - "github.com/swaggo/http-swagger/v2"
          - "github.com/segmentio/kafka-go"
        deny:
          - pkg: "github.com/pkg/errors"
            desc: Should be replaced by standard lib errors package
          - pkg: "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/mylogger"
            desc: This project have own package for similar purpose
          - pkg: "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/myerrors"
            desc: This project have own package for similar purpose
          - pkg: "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/responses"
            desc: This project have own package for similar purpose
  gci:
    sections:
      # Standard section: captures all standard packages.
      - standard

      # Current project section: contains all imports from current project
      - prefix(github.com/Vilinvil/task_technology_echelon)

      # Default section: contains all imports that could not be matched to another section type.
      - default
    custom-order: true
  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: snake
  varnamelen:
    min-name-length: 3
    ignore-decls:
      - t *testing.T
      - tx pgx.Tx
      - w http.ResponseWriter
      - r *http.Request
      - r io.Reader

issues:
  exclude-rules:
    - path: _test.go
      linters:
        - funlen
